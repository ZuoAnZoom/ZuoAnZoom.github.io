<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/03/04/hello-world/</url>
    <content><![CDATA[<p>欢迎来到我的博客 <span class="github-emoji" data-alias="tada" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">🎉</span></p>
<p>祝各位都能找到需要的东西 <span class="github-emoji" data-alias="bulb" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8">💡</span></p>
<p>另外，祝胃口超棒 <span class="github-emoji" data-alias="smile" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p>
<span id="more"></span>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Intro</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ inline 简单探讨</title>
    <url>/2021/03/06/C-inline-%E7%AE%80%E5%8D%95%E6%8E%A2%E8%AE%A8/</url>
    <content><![CDATA[<p>前段时间在写代码的时候，发现了关于内联 inline 的一些细节，挑重要的放在这里，做一个集中记录。</p>
<p><span class="github-emoji" data-alias="star2" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8">🌟</span> 以下总结使用 inline 的一些注意事项，均针对多文件 C++ 工程：</p>
<span id="more"></span>
<hr>
<ol type="1">
<li><p>在 class 内部<strong>定义</strong>的 member function，函数前不需要添加 inline，因为编译器在编译的时候会默认 inline 它。但是，到底能不能成为 inline function，这个要看编译器的能力，如果你的这部分代码量较大较复杂，编译器即使想 inline 也没法 inline。不过在这种情况下，如果你想加 inline，也是可以的，作为一种显式的声明。</p></li>
<li><p>在 class 外部<strong>定义</strong>的 member function，如果你想让它 inline，就需要在函数定义前加上 inline，同时，<strong>这个 member function 的定义还需要放在类的头文件中</strong>（或写在同一个源文件中），否则在编译的时候会无法进行置换，就会报错 <code>undefined reference</code>。</p></li>
<li><p>按第 2 点提到的，要把 inline function 的定义和 class 的定义写在同一个头文件（或源文件）中，这样做是 ok 的，没有问题，但是会造成类的接口和类的实现没有分类开，不利于信息隐藏（比如你的代码要给别人用，你又不想给源码，你就可以把源文件编译好，给别人一个头文件说明接口就行了）。这样的做法在实际工程中，除非对程序的执行效率有非常高的要求，一般还是会把接口和定义分开两个文件去写。除非这个在类外定义的 member function 体量很小，且需要高频调用，才会在前面加上 inline。</p></li>
<li><p>按第 2 点提到的，在 class 外定义的 inline function 要要在函数定义前加上 inline，那么<strong>函数声明处也要加 inline 吗？</strong>答案是，<strong>不需要</strong>，但是加也可以。因为<strong>关键字 inline 必须要和函数定义放在一起才能使函数成为内联</strong>，如果只把 inline 放在函数声明前是没有作用的。同时，inline 正常我是不会加在函数声明前的，因为这样做不会影响函数功能，还可以提升代码的<strong>大气水平</strong>，毕竟<strong>声明和定义不是一种东西</strong>，且使用我代码的用户也没需要、没必要知道这个函数是否为 inline function。</p></li>
<li><p>在这里再提一下 inline 的作用。程序调用函数时间花销是很大的，如果一个函数运行完只需要 0.05s，但是调用程序却要花费 0.1s，这样的调用明显会影响程序的运行效率。如果在这个函数前加上 inline，编译器就会把函数代码拷贝嵌入到函数的调用点，这样就不会有调用函数的花销了，从而提升程序运行效率。</p></li>
<li><p>按第 5 点描述的，inline 就没有坏处吗？inline 虽然省去了函数调用的时间，但是会造成代码体积膨胀，换句话说，用<strong>内存空间换时间</strong>。但是用侯老师的话来说，这也是一种必要的行为，当然他的意思肯定是不针对复杂函数。在我看来的话，如果函数体积较大或包含循环等其他复杂结构控制语句，要不要 inline 你自己心里还不知道吗？</p></li>
</ol>
]]></content>
      <categories>
        <category>程序</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Polymorphism 简单探讨</title>
    <url>/2021/03/05/C-Polymorphism-%E7%AE%80%E5%8D%95%E6%8E%A2%E8%AE%A8/</url>
    <content><![CDATA[<p>关于 C++ 中多态 Polymorphism 的实现，我们都知道要通过虚函数 virtual function。记得我第一次接触多态的例程的时候，在父类 Base Class 中，并没有在需要子类 Derived Class 重定义的函数前声明 virtual，不过即便如此，也一样实现了多态。后来，我学习到 virtual function 的时候才发现，奇怪，不使用 virtual 也可以在子类中对函数进行重定义，那么 virtual 函数的不同在哪里呢？</p>
<span id="more"></span>
<h1 id="讨论-1">讨论 1</h1>
<blockquote>
<p><strong>C++ 的 non-virtual 函数可以重定义，那么 virtual 函数相比 non-virtual 函数有什么不一样？</strong></p>
</blockquote>
<div class="note info"><p>结论：虚函数能让你在仅用一个指针进行调用时，确保访问到希望访问的方法，而非虚函数不行。</p>
</div>
<p>见如下 Code_1，基类的函数前并没有加 virtual。从输出结果可以看出，pa 指向 Pig 时候，并没有访问到 Pig 的方法。同样下面存放指针的 voa 容器也没有访问到正确的方法。</p>
<p>现在，我们把代码改成如下 Code_2（基类成员函数前加 virtual）。显而易见，现在都访问到了正确的方法。</p>
<p>不过需要注意的是，在这个例子中我并没有写析构函数 dtor，如果（在 Animal 中）写出则必须为 virtual。</p>
<div class="tabs" id="<span-class=github-emoji-alias=fu-style=-fallback-src=https://github.githubassets.com/images/icons/emoji/unicode/1f595.png?v8>&#x1f595;</span>-code_"><ul class="nav-tabs"><li class="tab active"><a href="#<span-class=github-emoji-alias=fu-style=-fallback-src=https://github.githubassets.com/images/icons/emoji/unicode/1f595.png?v8>&#x1f595;</span>-code_-1"><span class="github-emoji" alias="fu" style="fallback-src=https://github.githubassets.com/images/icons/emoji/unicode/1f595.png?v8">&#x1f595;</span> Code_ 1</a></li><li class="tab"><a href="#<span-class=github-emoji-alias=fu-style=-fallback-src=https://github.githubassets.com/images/icons/emoji/unicode/1f595.png?v8>&#x1f595;</span>-code_-2"><span class="github-emoji" alias="fu" style="fallback-src=https://github.githubassets.com/images/icons/emoji/unicode/1f595.png?v8">&#x1f595;</span> Code_ 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="<span-class=github-emoji-alias=fu-style=-fallback-src=https://github.githubassets.com/images/icons/emoji/unicode/1f595.png?v8>&#x1f595;</span>-code_-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">animalSound</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;__Animal_make_a_sound__&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span> :</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">animalSound</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;__Pig_make_a_sound__&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> :</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">animalSound</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;__Dog_make_a_sound__&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    Animal _Animal;</span><br><span class="line">    Pig _pig;</span><br><span class="line">    Dog _dog;</span><br><span class="line">    _Animal.animalSound();  <span class="comment">//__Animal_make_a_sound__</span></span><br><span class="line">    _pig.animalSound();     <span class="comment">//__Pig_make_a_sound__</span></span><br><span class="line">    _dog.animalSound();     <span class="comment">//__Dog_make_a_sound__</span></span><br><span class="line"></span><br><span class="line">    Pig *pp = <span class="keyword">new</span> Pig();</span><br><span class="line">    Animal *pa = pp;</span><br><span class="line">    pa-&gt;animalSound();      <span class="comment">//__Animal_make_a_sound__</span></span><br><span class="line">    pp-&gt;animalSound();      <span class="comment">//__Pig_make_a_sound__</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;Animal *&gt; voa;</span><br><span class="line">    voa.push_back(<span class="keyword">new</span> Pig());</span><br><span class="line">    voa.push_back(<span class="keyword">new</span> Dog());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x: voa) &#123;</span><br><span class="line">        x-&gt;animalSound();   <span class="comment">//__Animal_make_a_sound__</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">//__Animal_make_a_sound__</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="<span-class=github-emoji-alias=fu-style=-fallback-src=https://github.githubassets.com/images/icons/emoji/unicode/1f595.png?v8>&#x1f595;</span>-code_-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">animalSound</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;__Animal_make_a_sound__&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span> :</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">animalSound</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;__Pig_make_a_sound__&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> :</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">animalSound</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;__Dog_make_a_sound__&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    Animal _Animal;</span><br><span class="line">    Pig _pig;</span><br><span class="line">    Dog _dog;</span><br><span class="line">    _Animal.animalSound();  <span class="comment">//__Animal_make_a_sound__</span></span><br><span class="line">    _pig.animalSound();     <span class="comment">//__Pig_make_a_sound__</span></span><br><span class="line">    _dog.animalSound();     <span class="comment">//__Dog_make_a_sound__</span></span><br><span class="line"></span><br><span class="line">    Pig *pp = <span class="keyword">new</span> Pig();</span><br><span class="line">    Animal *pa = pp;</span><br><span class="line">    pa-&gt;animalSound();      <span class="comment">//__Pig_make_a_sound__</span></span><br><span class="line">    pp-&gt;animalSound();      <span class="comment">//__Pig_make_a_sound__</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;Animal *&gt; voa;</span><br><span class="line">    voa.push_back(<span class="keyword">new</span> Pig());</span><br><span class="line">    voa.push_back(<span class="keyword">new</span> Dog());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x: voa) &#123;</span><br><span class="line">        x-&gt;animalSound();   <span class="comment">//__Pig_make_a_sound__</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">//__Dog_make_a_sound__</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>
<h1 id="讨论-2">讨论 2</h1>
<blockquote>
<p>什么情况下使用 virtual ？或者说，有什么使用建议？</p>
</blockquote>
<div class="note info"><ul>
<li>某类作为父类，其派生类需要对函数进行重定义 override，要对需要重定义的函数前加 virtual。</li>
<li>某类存在派生，那么它的析构函数 dtor 必须是 virtual 的，否则可能导致资源泄露。</li>
<li>non-virtual 函数可以确保当你使用父类指针时，一定能调用父类的方法（上述例子）。</li>
</ul>
</div>
<p>另外，virtual 函数调用要通过虚表 virtual table 找到对应的函数指针，而 non-virtual 函数在编译的时候就已经确定了调用函数的地址。所以，调用函数的效率上 non-virtual 函数高一些。</p>
<h1 id="讨论-3">讨论 3</h1>
<p><span class="github-emoji" data-alias="star" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> <strong>总结：</strong></p>
<ul>
<li>virtual 可以实现多态，这是我们都知道的。</li>
<li>non-virtual 也可以实现多态特性，但是在进行指针调用时候无法访问到子类的正确方法上，这一点需要注意。</li>
<li>所以，养成好习惯，父类需要重定义 override 的函数，就加上 virtual。</li>
</ul>
]]></content>
      <categories>
        <category>程序</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 推荐软件目录[长期更新]</title>
    <url>/2021/03/04/Linux-%E6%8E%A8%E8%8D%90%E8%BD%AF%E4%BB%B6%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<p><span class="github-emoji" data-alias="star2" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8">🌟</span> 主要精选 Linux 下的一些发行版、软件及通用字体等。都是我曾经和现在使用过及正在使用的，均不做过多介绍，感兴趣的可以自己填坑，这样有助于个人提高。</p>
<h1 id="linux-distro">Linux Distro</h1>
<ol type="1">
<li><a href="https://pop.system76.com/">Pop_OS</a> : based on debian</li>
<li><a href="https://linuxmint.com/">Linux Mint</a>: based on debian <span id="more"></span></li>
<li><a href="https://archlinux.org/">Arch Linux</a></li>
<li><a href="https://manjaro.org/">Manjaro</a>: based on Arch</li>
</ol>
<h1 id="fonts">Fonts</h1>
<ol type="1">
<li><a href="https://github.com/tonsky/FiraCode">Fira Code</a></li>
</ol>
<h1 id="terminal-emulator">Terminal emulator</h1>
<ol type="1">
<li><a href="https://github.com/alacritty/alacritty">Alacritty</a></li>
<li><a href="https://st.suckless.org/">st</a></li>
</ol>
<h1 id="text-editor">Text Editor</h1>
<ol type="1">
<li><a href="https://www.vim.org/">Vim</a></li>
<li><a href="https://www.sublimetext.com/">Sublime</a></li>
<li><a href="https://code.visualstudio.com/">VSCode</a></li>
</ol>
<h1 id="tools-required">Tools REQUIRED</h1>
<ol type="1">
<li><a href="https://github.com/tmux/tmux/wiki">TMUX</a></li>
<li><a href="https://github.com/ranger/ranger">ranger</a></li>
<li><a href="https://github.com/powerline/powerline">Powerline</a></li>
<li><a href="https://github.com/davatorium/rofi">Rofi</a></li>
<li><a href="https://github.com/brndnmtthws/conky">Conky</a></li>
<li><a href="https://github.com/TheAssassin/AppImageLauncher">AppImageLauncher</a></li>
<li><a href="https://www.syntevo.com/smartgit/">SmartGit</a></li>
</ol>
<h1 id="window-manager">Window Manager</h1>
<ol type="1">
<li><a href="https://dwm.suckless.org/">dwm</a></li>
<li><a href="https://i3wm.org/">i3</a></li>
<li>对于大多数人，推荐用 Pop!_OS 20.04 自带的 WM 先感受一下！</li>
</ol>
<h1 id="take-notes">Take Notes</h1>
<ol type="1">
<li><p><a href="https://github.com/vnotex/vnote/releases">VNote-2.10</a>: 少Qt库，会导致 Fcitx 输入法无法使用，需要拆包加库重组，见<a href="https://github.com/vnotex/vnote/issues/1505#issuecomment-726603598">#1505 (comment)</a></p></li>
<li><p><a href="https://launchpad.net/~umang/+archive/ubuntu/indicator-stickynotes">indicator-stickynotes</a></p></li>
</ol>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Software</tag>
      </tags>
  </entry>
  <entry>
    <title>我的博客[持续更新]</title>
    <url>/2021/03/04/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>我的博客中所用的技术等其他关于本博客的说明内容。</p>
<h1 id="文章列表">文章列表</h1>
<p><a href="https://zuoanzoom.github.io/2021/03/06/C-inline-%E7%AE%80%E5%8D%95%E6%8E%A2%E8%AE%A8/">C++ inline 简单探讨</a></p>
<p><a href="https://zuoanzoom.github.io/2021/03/05/C-Polymorphism-%E7%AE%80%E5%8D%95%E6%8E%A2%E8%AE%A8/">C++ Polymorphism 简单探讨</a></p>
<p><a href="https://zuoanzoom.github.io/2021/03/04/Linux-%E6%8E%A8%E8%8D%90%E8%BD%AF%E4%BB%B6%E7%9B%AE%E5%BD%95/">Linux-推荐软件目录</a></p>
<p><a href="https://zuoanzoom.github.io/2021/03/04/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/">我的博客</a></p>
<p><a href="https://zuoanzoom.github.io/2021/03/04/hello-world/">Hello World</a></p>
<span id="more"></span>
<h1 id="博客-tech">博客 Tech</h1>
<p><em><font color="gray">基础建站：</font></em></p>
<p><span class="github-emoji" data-alias="mag" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8">🔍</span> <a href="https://hexo.io/zh-cn/">Hexo</a> + <a href="https://pages.github.com/">Github Pages</a></p>
<p><span class="github-emoji" data-alias="mag" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8">🔍</span> <a href="https://theme-next.js.org/">NexT Theme</a></p>
<p><span class="github-emoji" data-alias="mag" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8">🔍</span> <a href="https://nodejs.org/en/">Node.js</a></p>
<p><span class="github-emoji" data-alias="mag" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8">🔍</span> <a href="https://www.npmjs.com/">npm</a></p>
<p><em><font color="gray">emoji：</font></em></p>
<p><span class="github-emoji" data-alias="mag" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8">🔍</span> <a href="https://github.com/next-theme/hexo-filter-emoji">hexo-filter-emoji</a></p>
<p><span class="github-emoji" data-alias="mag" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8">🔍</span> <a href="https://www.webfx.com/tools/emoji-cheat-sheet/">emoji cheet sheet</a></p>
<p><em><font color="gray">图床和评论系统：</font></em></p>
<p><span class="github-emoji" data-alias="mag" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8">🔍</span> <a href="https://imgtu.com/">路过图床</a></p>
<p><del><span class="github-emoji" data-alias="mag" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8">🔍</span> <a href="https://github.com/gitalk/gitalk">Gitalk</a></del></p>
<p><span class="github-emoji" data-alias="mag" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8">🔍</span> <a href="https://github.com/apps/utterances">utterances</a></p>
<p><em><font color="gray">文档渲染和公式显示：</font></em></p>
<p><span class="github-emoji" data-alias="mag" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8">🔍</span> <a href="https://github.com/wzpan/hexo-renderer-pandoc">hexo-renderer-pandoc</a></p>
<p><span class="github-emoji" data-alias="mag" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8">🔍</span> <a href="https://www.mathjax.org/">Mathjax</a></p>
<p><span class="github-emoji" data-alias="mag" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8">🔍</span> <a href="https://pandoc.org/">Pandoc</a></p>
<p><em><font color="gray">搜索功能和计数工具：</font></em></p>
<p><span class="github-emoji" data-alias="mag" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8">🔍</span> <a href="https://github.com/theme-next/hexo-generator-searchdb">hexo-generator-searchdb</a></p>
<p><span class="github-emoji" data-alias="mag" style data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8">🔍</span> <a href="https://busuanzi.ibruce.info/">busuanzi</a></p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Intro</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
</search>
